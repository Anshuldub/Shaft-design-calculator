import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import math
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle, Circle
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg



material_database = {
    "Steel C07": {
        "youngs_modulus": 210e9,  # GPa to Pa
        "allowable_shear_stress": 30e6,  # MPa to Pa
    },
    "Steel C10": {
        "youngs_modulus": 220e9,
        "allowable_shear_stress": 32e6,
    },
    "Steel C14": {
        "youngs_modulus": 230e9,
        "allowable_shear_stress": 34e6,
    },
    # Add other grades of steel here
    "Steel C50": {
        "youngs_modulus": 250e9,
        "allowable_shear_stress": 40e6,
    },
    "Aluminum": {
        "youngs_modulus": 70e9,
        "allowable_shear_stress": 45e6,
    },
}

def calculate_shaft_diameter():
    # Get input values
    power = float(power_entry.get())
    speed = float(speed_entry.get())
    shaft_length = float(shaft_length_entry.get())
    pressure_angle = float(pressure_angle_entry.get())
    pinion_diameter = float(pinion_diameter_entry.get())
    gear_diameter = float(gear_diameter_entry.get())
    pinion_distance_left = float(pinion_distance_left_entry.get())
    pinion_distance_right = float(pinion_distance_right_entry.get())
    material_name = material_combobox.get()

    # Convert pressure angle to radians
    pressure_angle_radians = math.radians(pressure_angle)

    # Calculate the bending moment
    M_t = (60 * power * 1000) / (2 * math.pi * speed)  # Convert power to W and speed to rad/s
    Ft_G = M_t / (pinion_diameter / 2)
    Fr_G = Ft_G * math.tan(pressure_angle_radians)
    Ft_P = M_t / (gear_diameter / 2)
    Fr_P = Ft_P * math.tan(pressure_angle_radians)

    R_bv = (Ft_P * (shaft_length - pinion_distance_right) - (Fr_G * pinion_distance_left)) / shaft_length
    R_av = Ft_P - Fr_G - R_bv
    R_bh = (Fr_G * (shaft_length - pinion_distance_left) - Ft_G * pinion_distance_left) / shaft_length
    R_ah = Fr_G - Ft_G - R_bh

    MBG_eq = math.sqrt(
        (R_bv * (shaft_length - pinion_distance_left) - (Ft_P * (shaft_length - (pinion_distance_left + pinion_distance_right))))**2
        + (R_bh * (shaft_length - pinion_distance_left) - (Fr_G * (shaft_length - (pinion_distance_left + pinion_distance_right))))**2)

    MBP_eq = math.sqrt((R_bv * pinion_distance_right)**2 + (R_bh * pinion_distance_right)**2)

    max_bending_moment = max(MBG_eq, MBP_eq)

    # Get material properties
    material = material_database.get(material_name)
    if material:
        allowable_shear_stress = material["allowable_shear_stress"]
        # Calculate diameter using the provided formula
        shaft_diameter = math.sqrt((16 * max_bending_moment**2 + M_t**2) / (math.pi * allowable_shear_stress))
        shaft_diameter_label.config(text=f"Suitable Shaft Diameter: {shaft_diameter:.2f} mm")

        # Create a visualization of the shaft with gears
        create_shaft_visualization(root, shaft_length, pinion_distance_left, pinion_distance_right, shaft_diameter)

    else:
        messagebox.showerror("Error", "Material not found in the database.")

def create_shaft_visualization(root, shaft_length, pinion_distance_left, pinion_distance_right, shaft_diameter):
    fig, ax = plt.subplots()
    ax.set_aspect('equal')

    # Create a rectangular shaft
    shaft = Rectangle((0, 0), shaft_length, shaft_diameter, facecolor='lightgray')
    ax.add_patch(shaft)

    # Create two gears as circles
    gear_radius = shaft_diameter / 2
    left_gear = Circle((pinion_distance_left, gear_radius), gear_radius, facecolor='blue', alpha=0.7)
    right_gear = Circle((shaft_length - pinion_distance_right, gear_radius), gear_radius, facecolor='red', alpha=0.7)
    ax.add_patch(left_gear)
    ax.add_patch(right_gear)

    ax.set_xlim(0, shaft_length)
    ax.set_ylim(0, shaft_diameter)

    ax.set_xlabel("Shaft Length (AB)")
    ax.set_ylabel("Shaft Diameter")

    # Create a Tkinter canvas for Matplotlib
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.draw()

    # Embed the canvas in the Tkinter window
    canvas.get_tk_widget().grid(row=11, column=0, columnspan=3)

    plt.close(fig)  # Close the Matplotlib figure to avoid duplicate plots

    return canvas


def calculate_gear_pulley_diameter():
    # ... (other code)
    # Get input values for the case of gears and pulleys
    power = float(gear_pulley_power_entry.get())
    speed = float(gear_pulley_speed_entry.get())
    shaft_length = float(gear_pulley_shaft_length_entry.get())
    pressure_angle = float(gear_pulley_pressure_angle_entry.get())
    gear_diameter = float(gear_pulley_gear_diameter_entry.get())
    pulley_diameter = float(gear_pulley_pulley_diameter_entry.get())
    tension_ratio = float(gear_pulley_tension_ratio_entry.get())
    pulley_weight = float(gear_pulley_pulley_weight_entry.get())
    
    pinion_distance_left = float(gear_pulley_pinion_distance_left_entry.get())
    pulley_distance_right = float(gear_pulley_pulley_distance_right_entry.get())
    material_name = gear_pulley_material_combobox.get()

    # Convert pressure angle to radians
    pressure_angle_radians = math.radians(pressure_angle)



    M_tB = ((power * 60) / (2 * math.pi * speed))
    F_tB = (M_tB / (gear_diameter / 2))
    F_rB = F_tB * math.tan(pressure_angle)
    T2 = M_tB/((pulley_diameter/2)*(tension_ratio-1)) 
    T1 = tension_ratio*T2
    
    
    F_h = T1 + T2
    F_v = pulley_weight
    
    # Vertical BM
    R_Cv = ((F_tB*pinion_distance_left)+(pulley_weight*shaft_length))/(shaft_length-pulley_distance_right)
    R_Av = F_tB + pulley_weight - R_Cv
    #bending moment
    MB_v = (R_Cv*(shaft_length - (pinion_distance_left+pulley_distance_right))) - (pulley_weight*(shaft_length-pulley_distance_right))
    MC_v = -(pulley_weight*pulley_distance_right)
    
    # Horizontal
    R_Ch = ((F_rB*pinion_distance_left)+(F_h*shaft_length))/(shaft_length-pulley_distance_right)
    R_Ah = F_rB +F_h - R_Ch
    MB_h = (R_Ch*(shaft_length - (pinion_distance_left+pulley_distance_right))) - (F_h*(shaft_length-pulley_distance_right))
    MC_h = -(F_h*pulley_distance_right)
    
    
    # Equivalent BM
    M_bBeq = math.sqrt((MB_v)**2 + (MB_h)**2)
    M_bCeq = math.sqrt((MC_v)**2 + (MC_h)**2)
    
    max_bending_moment = max(M_bBeq, M_bCeq)
    
    # Get material properties
    material = material_database.get(material_name)
    if material:
        allowable_shear_stress = material["allowable_shear_stress"]
        
        # Calculate diameter using the provided formula
        gear_pulley_shaft_diameter = math.sqrt((16 * max_bending_moment**2 + M_tB**2) / (math.pi * allowable_shear_stress))**1/3
        
        gear_pulley_diameter_label.config(
            text=f"Suitable Shaft Diameter: {gear_pulley_shaft_diameter:.2f} mm")

        # Create a visualization of the shaft with gears
        create_shaft_visualization(root, shaft_length, pinion_distance_left, pulley_distance_right, gear_pulley_shaft_diameter)

    else:
        messagebox.showerror("Error", "Material not found in the database.")

    



from matplotlib.patches import Rectangle, Circle, Polygon

def create_gear_pulley_visualization(root, shaft_length, pinion_distance_left, pulley_distance_right, gear_pulley_shaft_diameter, pulley_diameter):
    fig, ax = plt.subplots()
    ax.set_aspect('equal')

    # Create a rectangular shaft
    shaft = Rectangle((0, 0), shaft_length, gear_pulley_shaft_diameter, facecolor='lightgray')
    ax.add_patch(shaft)

    # Create gear as a circle
    gear_radius =  gear_pulley_shaft_diameter / 2
    gear = Circle((pinion_distance_left, gear_radius), gear_radius, facecolor='blue', alpha=0.7)
    ax.add_patch(gear)

    # Create pulley as a triangle
    pulley_radius = pulley_diameter / 2
    pulley_height = gear_pulley_shaft_diameter  # Adjust the height of the pulley
    pulley_points = [
        (shaft_length - pulley_distance_right, 0),
        (shaft_length - pulley_distance_right - pulley_radius, pulley_height),
        (shaft_length - pulley_distance_right + pulley_radius, pulley_height),
    ]
    pulley = Polygon(pulley_points, facecolor='black', alpha=0.7)
    ax.add_patch(pulley)


    plt.xlabel("Shaft Length (AB)")
    plt.ylabel("Shaft Diameter (mm)")

    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas_widget = canvas.get_tk_widget()
    canvas_widget.grid(row=1, column=1, rowspan=20) 
    canvas.draw()


# Create the main tkinter window
root = tk.Tk()
root.title("Shaft Diameter Calculator")




# Create and arrange input widgets
frame = ttk.Frame(root, padding="10")
frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))



# Material selection
material_label = ttk.Label(frame, text="Material Selection:")
material_label.grid(row=0, column=0, sticky=tk.W)
material_combobox = ttk.Combobox(frame, values=list(material_database.keys()))

material_combobox.grid(row=0, column=1, columnspan=2)
material_combobox.set("Steel")

# Other input fields
power_label = ttk.Label(frame, text="Power (P):")
power_label.grid(row=1, column=0, sticky=tk.W)
power_entry = ttk.Entry(frame)
power_entry.grid(row=1, column=1, columnspan=2)

speed_label = ttk.Label(frame, text="Speed (N):")
speed_label.grid(row=2, column=0, sticky=tk.W)
speed_entry = ttk.Entry(frame)
speed_entry.grid(row=2, column=1, columnspan=2)

shaft_length_label = ttk.Label(frame, text="Length of Shaft (AB) (mm):")
shaft_length_label.grid(row=3, column=0, sticky=tk.W)
shaft_length_entry = ttk.Entry(frame)
shaft_length_entry.grid(row=3, column=1, columnspan=2)

# Pressure angle with limited options
pressure_angle_label = ttk.Label(frame, text="Pressure Angle:")
pressure_angle_label.grid(row=4, column=0, sticky=tk.W)
# pressure_angle_combobox = ttk.Combobox(frame, values=[14.5, 20])
# pressure_angle_combobox.grid(row=4, column=1, columnspan=2)
# pressure_angle_combobox.set(20)  # Set the default value to 20
pressure_angle_entry = ttk.Entry(frame)
pressure_angle_entry.grid(row=4, column=1, columnspan=2)



pinion_diameter_label = ttk.Label(frame, text="Pinion Diameter (D1)(mm):")
pinion_diameter_label.grid(row=5, column=0, sticky=tk.W)
pinion_diameter_entry = ttk.Entry(frame)
pinion_diameter_entry.grid(row=5, column=1, columnspan=2)

gear_diameter_label = ttk.Label(frame, text="Gear Diameter (D2)(mm):")
gear_diameter_label.grid(row=6, column=0, sticky=tk.W)
gear_diameter_entry = ttk.Entry(frame)
gear_diameter_entry.grid(row=6, column=1, columnspan=2)

pinion_distance_left_label = ttk.Label(frame, text="Pinion Distance from Left (L(left))(mm):")
pinion_distance_left_label.grid(row=7, column=0, sticky=tk.W)
pinion_distance_left_entry = ttk.Entry(frame)
pinion_distance_left_entry.grid(row=7, column=1, columnspan=2)

pinion_distance_right_label = ttk.Label(frame, text="Pinion Distance from Right (L(right))(mm):")
pinion_distance_right_label.grid(row=8, column=0, sticky=tk.W)
pinion_distance_right_entry = ttk.Entry(frame)
pinion_distance_right_entry.grid(row=8, column=1, columnspan=2)

# Calculate button
calculate_button = ttk.Button(frame, text="Calculate", command=calculate_shaft_diameter)
calculate_button.grid(row=9, column=0, columnspan=3)

# Display the result
shaft_diameter_label = ttk.Label(frame, text="Suitable Shaft Diameter (mm): -")
shaft_diameter_label.grid(row=10, column=0, columnspan=3)



# Create and arrange input widgets for the case of gears and pulleys
gear_pulley_frame = ttk.Frame(root, padding="10")
gear_pulley_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))

# Material selection for the case of gears and pulleys
gear_pulley_material_label = ttk.Label(gear_pulley_frame, text="Material Selection:")
gear_pulley_material_label.grid(row=0, column=0, sticky=tk.W)
gear_pulley_material_combobox = ttk.Combobox(gear_pulley_frame, values=list(material_database.keys()))
gear_pulley_material_combobox.grid(row=0, column=1, columnspan=2)
gear_pulley_material_combobox.set("Steel")

# Add other input fields for the case of gears and pulleys
gear_pulley_power_label = ttk.Label(gear_pulley_frame, text="Power (P):")
gear_pulley_power_label.grid(row=1, column=0, sticky=tk.W)
gear_pulley_power_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_power_entry.grid(row=1, column=1, columnspan=2)

gear_pulley_speed_label = ttk.Label(gear_pulley_frame, text="Speed (N):")
gear_pulley_speed_label.grid(row=2, column=0, sticky=tk.W)
gear_pulley_speed_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_speed_entry.grid(row=2, column=1, columnspan=2)

gear_pulley_shaft_length_label = ttk.Label(gear_pulley_frame, text="Shaft Length (L):")
gear_pulley_shaft_length_label.grid(row=3, column=0, sticky=tk.W)
gear_pulley_shaft_length_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_shaft_length_entry.grid(row=3, column=1, columnspan=2)

gear_pulley_pressure_angle_label = ttk.Label(gear_pulley_frame, text="Pressure Angle:")
gear_pulley_pressure_angle_label.grid(row=4, column=0, sticky=tk.W)
#gear_pulley_pressure_angle_combobox = ttk.Combobox(gear_pulley_frame, values=[14.5, 20])
#gear_pulley_pressure_angle_combobox.grid(row=4, column=1, columnspan=2)
#gear_pulley_pressure_angle_combobox.set(20)  # Set the default value to 20
gear_pulley_pressure_angle_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_pressure_angle_entry.grid(row=4, column=1, columnspan=2)


gear_pulley_gear_diameter_label = ttk.Label(gear_pulley_frame, text="Gear Diameter (mm):")
gear_pulley_gear_diameter_label.grid(row=5, column=0, sticky=tk.W)
gear_pulley_gear_diameter_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_gear_diameter_entry.grid(row=5, column=1, columnspan=2)

gear_pulley_pulley_diameter_label = ttk.Label(gear_pulley_frame, text="Pulley Diameter (mm):")
gear_pulley_pulley_diameter_label.grid(row=6, column=0, sticky=tk.W)
gear_pulley_pulley_diameter_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_pulley_diameter_entry.grid(row=6, column=1, columnspan=2)

gear_pulley_tension_ratio_label = ttk.Label(gear_pulley_frame, text="Tension Ratio:")
gear_pulley_tension_ratio_label.grid(row=7, column=0, sticky=tk.W)
gear_pulley_tension_ratio_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_tension_ratio_entry.grid(row=7, column=1, columnspan=2)

gear_pulley_pulley_weight_label = ttk.Label(gear_pulley_frame, text="Pulley Weight (N):")
gear_pulley_pulley_weight_label.grid(row=8, column=0, sticky=tk.W)
gear_pulley_pulley_weight_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_pulley_weight_entry.grid(row=8, column=1, columnspan=2)

gear_pulley_pinion_distance_left_label = ttk.Label(gear_pulley_frame, text="Pinion Distance (Left) (mm):")
gear_pulley_pinion_distance_left_label.grid(row=9, column=0, sticky=tk.W)
gear_pulley_pinion_distance_left_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_pinion_distance_left_entry.grid(row=9, column=1, columnspan=2)

gear_pulley_pulley_distance_right_label = ttk.Label(gear_pulley_frame, text="Pulley Distance (Right) (mm):")
gear_pulley_pulley_distance_right_label.grid(row=10, column=0, sticky=tk.W)
gear_pulley_pulley_distance_right_entry = ttk.Entry(gear_pulley_frame)
gear_pulley_pulley_distance_right_entry.grid(row=10, column=1, columnspan=2)



# Calculate button for the case of gears and pulleys
calculate_gear_pulley_button = ttk.Button(gear_pulley_frame, text="Calculate", command=calculate_gear_pulley_diameter)
calculate_gear_pulley_button.grid(row=11, column=0, columnspan=3)

# Display the result for the case of gears and pulleys
gear_pulley_diameter_label = ttk.Label(gear_pulley_frame, text="Suitable Shaft Diameter (mm): -")
gear_pulley_diameter_label.grid(row=12, column=0, columnspan=3)

root.mainloop()
